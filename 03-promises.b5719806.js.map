{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAYF,SAASG,eAAe,UAqD1CJ,EAAKK,iBAAiB,UApCtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAaP,SAASC,cAAc,uBACpCO,EAAYR,SAASC,cAAc,sBACnCQ,EAAcT,SAASC,cAAc,wBAErCS,EAAaC,SAASJ,EAAWK,OACjCC,EAAYF,SAASH,EAAUI,OAC/BE,EAASH,SAASF,EAAYG,OAEpCV,EAAUa,UAAY,GAEtB,SAASC,EAAeC,GACtB,GAAIA,GAAYH,EAAQ,EA7B5B,SAAuBI,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFM,YAAW,KACTF,EAAQ,C,SAAEN,E,MAAUC,GAAQ,GAC3BA,GAEHO,YAAW,KACTD,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAC1BA,EAAM,G,EAsBTQ,CAAcV,EAFAP,GAAcO,EAAW,GAAKJ,GAGzCe,MAAK,EAACV,SAAEA,EAAQC,MAAEA,MACjB,MAAMU,EAAU,uBAAqBX,QAAiBC,UACpDjB,EAAQa,WAAac,EACvBb,EAAeE,EAAW,EAAE,IAE7BY,OAAM,EAACZ,SAAEA,EAAQC,MAAEA,MAClB,MAAMU,EAAU,sBAAoBX,QAAeC,UACnDjB,EAAUa,WAAac,EACvBb,EAAeE,EAAW,EAAE,G,EAKpCF,CAAe,GAEfjB,EAAKgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\nconst outputDiv = document.getElementById('output');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      setTimeout(() => {\n        resolve({ position, delay });\n      }, delay);\n    } else {\n      setTimeout(() => {\n        reject({ position, delay });\n      }, delay);\n    }\n  });\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const firstDelay = parseInt(delayInput.value);\n  const delayStep = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  outputDiv.innerHTML = ''; // Limpiar el contenido anterior\n\n  function processPromise(position) {\n    if (position <= amount) {\n      const delay = firstDelay + (position - 1) * delayStep;\n\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          const message = `✅ Fulfilled promise ${position} in ${delay}ms<br>`;\n          outputDiv.innerHTML += message;\n          processPromise(position + 1); // Llamar recursivamente para procesar la siguiente promesa\n        })\n        .catch(({ position, delay }) => {\n          const message = `❌ Rejected promise ${position} in ${delay}ms<br>`;\n          outputDiv.innerHTML += message;\n          processPromise(position + 1); // Llamar recursivamente para procesar la siguiente promesa\n        });\n    }\n  }\n\n  processPromise(1); // Comenzar el proceso con la primera promesa\n\n  form.reset();\n}\n\nform.addEventListener('submit', handleSubmit);\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$outputDiv","getElementById","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","firstDelay","parseInt","value","delayStep","amount","innerHTML","processPromise","position1","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","message","catch","reset"],"version":3,"file":"03-promises.b5719806.js.map"}